# name: Actions üòé

# on: [push, pull_request, workflow_dispatch]

# jobs:
#   build:
#     name: Build my project ‚ú®
#     runs-on: self-hosted
#     if: github.ref == 'refs/heads/main'
#     steps:
#       # Checkout
#       - name: Checkout repository
#         uses: actions/checkout@v4.2.2
#         with:
#           lfs: false

#       - name: R√©parer les paquets
#         run: sudo dpkg --configure -a

#       - name: Installer jq
#         run: sudo apt-get update && sudo apt-get install -y jq

#       - name: Cache Unity Library
#         uses: actions/cache@v4
#         with:
#           path: Library
#           key: Library-${{ runner.os }}-${{ hashFiles('**/ProjectSettings/EditorBuildSettings.asset') }}
#           restore-keys: |
#             Library-${{ runner.os }}-

#       # Build
#       - name: Build project
#         uses: game-ci/unity-builder@v4.3.0
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#           UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
#           UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#           UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#         with:
#           targetPlatform: Android
#           cacheName: ''

#       # Output
#       - uses: actions/upload-artifact@v4.6.0
#         with:
#           name: Build
#           path: build
      
#       - name: Dropbox Large File Uploader
#         uses: thedefaultman/dropbox-large-file-uploader@v2.3.5
#         with:
#           app_key: ${{ secrets.DROPBOX_APP_KEY }}
#           app_secret: ${{ secrets.DROPBOX_APP_SECRET }}
#           # Dropbox API refresh token.
#           refresh_token: ${{ secrets.REFRESH_TOKEN_DROPBOX }}
#           # Path to the file to upload.
#           file_path: 'build/Android/Android.apk'
#           # Destination path in Dropbox.
#           dropbox_path: '/Build/Android.apk'
          
#       - name: Envoyer le lien sur Discord
#         run: |
#           DISCORD_WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
      
#           # Message Discord
#           MESSAGE_CONTENT="üöÄ **Nouvelle build disponible !**\nüéÆ T√©l√©chargez la derni√®re version de l'APK ici :\nüîó [üì• T√©l√©charger](https://www.dropbox.com/home/Build)"
      
#           # Envoyer le message sans utiliser jq
#           curl -s -X POST "$DISCORD_WEBHOOK_URL" \
#             -H "Content-Type: application/json" \
#             -d "{\"content\": \"$MESSAGE_CONTENT\"}"
      
#       - name: Supprimer les anciens messages du webhook
#         run: |
#           DISCORD_WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
      
#           # Debug: Afficher la r√©ponse brute de l'API
#           RESPONSE=$(curl -s "$DISCORD_WEBHOOK_URL/messages?limit=10")
#           echo "Response from Discord API: $RESPONSE"
      
#           # Extraire les IDs des messages (si la r√©ponse est correcte)
#           MESSAGES=$(echo "$RESPONSE" | jq -r '.[].id' || echo "")
      
#           # V√©rifier si on a bien r√©cup√©r√© des IDs
#           if [[ -z "$MESSAGES" ]]; then
#             echo "‚ùå Aucun message trouv√© ou r√©ponse invalide"
#             exit 0
#           fi
      
#           # Supprimer chaque message
#           for MESSAGE_ID in $MESSAGES; do
#             curl -X DELETE "$DISCORD_WEBHOOK_URL/messages/$MESSAGE_ID"
#             sleep 1  # Pause pour √©viter un rate-limit
#           done

#       # End Build
#       - name: Remove Game
#         run: |
#           sudo rm -r /home/polo/RunnerDepthsOfHue/_work/_actions/game-ci/unity-builder/v4.3.0/dist/BlankProject/Library/
#           sudo rm -r /home/polo/RunnerDepthsOfHue/_work/_actions/game-ci/unity-builder/v4.3.0/dist/BlankProject/Logs/
#           sudo rm -r /home/polo/RunnerDepthsOfHue/_work/_actions/game-ci/unity-builder/v4.3.0/dist/
